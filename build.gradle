/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

// TODO: groovy要お勉強 (*_*;

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.nio.file.Files
import java.nio.file.Path

def version = '0.7.4'

def baseDir = projectDir.toPath()
def targetJar = baseDir.resolve('xyz.hotchpotch.hogandiff/build/libs/xyz.hotchpotch.hogandiff.jar')

def outputDir
def outputDirWin64
def outputDirMacOS

def poiJars = [
    'poi-4.1.2/poi-4.1.2.jar',
    'poi-4.1.2/poi-ooxml-4.1.2.jar',
    'poi-4.1.2/poi-ooxml-schemas-4.1.2.jar',
    'poi-4.1.2/lib/commons-codec-1.13.jar',
    'poi-4.1.2/lib/commons-collections4-4.4.jar',
    'poi-4.1.2/lib/commons-compress-1.19.jar',
    'poi-4.1.2/lib/commons-math3-3.6.1.jar',
    'poi-4.1.2/lib/SparseBitSet-1.2.jar',
    'poi-4.1.2/ooxml-lib/xmlbeans-3.1.0.jar'
]

def poiFiles = poiJars + ['poi-4.1.2/LICENSE', 'poi-4.1.2/NOTICE']

def requiredMods = '' \
    + 'java.base,' \
    + 'java.desktop,' \
    + 'java.xml,' \
    + 'javafx.base,' \
    + 'javafx.controls,' \
    + 'javafx.fxml,' \
    + 'javafx.graphics,' \
    + 'jdk.charsets,' \
    + 'jdk.zipfs'


task setup {
    group 'distribution'
    
    String timetag = LocalDateTime.now().format(DateTimeFormatter.ofPattern('yyyyMMdd-HHmmss-SSS'))
    outputDir = baseDir.resolve('build/' + timetag)
    
    doLast {
        file(targetJar, PathValidation.FILE)
        mkdir outputDir
    }
}

task composeForWin64(dependsOn: setup) {
    group 'distribution'
    
    outputDirWin64 = outputDir.resolve("方眼Diff-${version}-win64")
    
    doLast {
        mkdir outputDirWin64
        
        // 静的リソースのコピー
        copy {
            from projectDir
            into outputDirWin64
            include 'README.md', 'LICENSE'
        }
        copy {
            from baseDir.resolve('resources')
            into outputDirWin64
            include '方眼Diff.exe.vmoptions'
        }
        
        // 外部ライブラリのコピー
        copy {
            from project['myprop.userlib']
            into outputDirWin64.resolve('lib')
            include poiFiles
        }
        
        // 最小構成JREの作成
        exec {
            commandLine project['myprop.cmd.jlink'],
                    '--compress=2',
                    '--module-path', "${project['myprop.jre.mod.win64']};${project['myprop.jfx.mod.win64']}",
                    '--add-modules', requiredMods,
                    '--output', outputDirWin64.resolve('jre-min-win64')
        }
        
        // .exeファイルの作成
        exec {
            commandLine project['myprop.cmd.exewrap'],
                    '-g',
                    '-t', '14',
                    '-i', baseDir.resolve('resources/favicon.ico'),
                    '-v', version,
                    '-V', version,
                    '-d', '方眼Diff',
                    '-p', '方眼Diff',
                    '-c', '(c) 2020 nmby',
                    '-j', targetJar,
                    '-o', outputDirWin64.resolve('方眼Diff.exe')
        }
    }
}

task zipForWin64(type: Zip, dependsOn: composeForWin64) {
    group 'distribution'
    
    metadataCharset='UTF-8'
    baseName = "hogandiff-${version}-win64"
    destinationDir = file(outputDir)
    from outputDirWin64
    into outputDirWin64.getFileName().toString()
}

task composeForMacOS(dependsOn: setup) {
    group 'distribution'
    
    outputDirMacOS = outputDir.resolve("方眼Diff-${version}-macos")
    
    doLast {
        mkdir outputDirMacOS
        
        // 静的リソースとjarファイルのコピー
        copy {
            from projectDir
            into outputDirMacOS
            include 'README.md', 'LICENSE'
        }
        copy {
            from baseDir.resolve('resources/方眼Diff.app')
            into outputDirMacOS.resolve('方眼Diff.app')
            exclude '**/.gitkeep'
        }
        copy {
            from baseDir.resolve('xyz.hotchpotch.hogandiff/build/libs')
            into outputDirMacOS.resolve('方眼Diff.app/Contents/Java')
            include 'xyz.hotchpotch.hogandiff.jar'
        }
        
        // 外部ライブラリのコピー
        copy {
            from project['myprop.userlib']
            into outputDirMacOS.resolve('方眼Diff.app/Contents/PlugIns/lib')
            include poiFiles
        }
        
        // 最小構成JREの作成
        exec {
            commandLine project['myprop.cmd.jlink'],
                    '--compress=2',
                    '--module-path', "${project['myprop.jre.mod.macos']};${project['myprop.jfx.mod.macos']}",
                    '--add-modules', requiredMods,
                    '--output', outputDirMacOS.resolve('方眼Diff.app/Contents/PlugIns/jre-min')
        }
    }
}

task zipForMacOS(type: Zip, dependsOn: composeForMacOS) {
    group 'distribution'
    
    metadataCharset='UTF-8'
    baseName = "hogandiff-${version}-macos"
    destinationDir = file(outputDir)
    from outputDirMacOS
    into outputDirMacOS.getFileName().toString()
}

task all(dependsOn: [zipForWin64, zipForMacOS]) {
    group 'distribution'
}

task checkDependencies {
    group 'test'
    
    doLast {
        Path userLib = Path.of(project['myprop.userlib'])
        String poiMods = ''
        poiJars.each {
            poiMods += userLib.resolve(it).toString().replace('\\', '/') + ';'
        }
        
        exec {
            commandLine project['myprop.cmd.jdeps'],
                    '--module-path', "${project['myprop.jre.mod.win64']};${project['myprop.jfx.lib.win64']};${poiMods}",
                    '-s', targetJar
        }
    }
}
