/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

// TODO: groovy要お勉強 (*_*;

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.nio.file.Files
import java.nio.file.Path

final def version = '0.7.5'

final def timetag = LocalDateTime.now().format(DateTimeFormatter.ofPattern('yyyyMMdd-HHmmss-SSS'))

final def baseDir = projectDir.toPath()
final def outputDir = baseDir.resolve('build/' + timetag)
final def outputDirWin64 = outputDir.resolve("方眼Diff-${version}-win64")
final def outputDirMacOS = outputDir.resolve("方眼Diff-${version}-macos")

final def targetJar = baseDir.resolve('xyz.hotchpotch.hogandiff/build/libs/xyz.hotchpotch.hogandiff.jar')

final def poi = 'poi-4.1.2'
final def poiJars = [
    'poi-4.1.2.jar',
    'poi-ooxml-4.1.2.jar',
    'poi-ooxml-schemas-4.1.2.jar',
    'lib/commons-codec-1.13.jar',
    'lib/commons-collections4-4.4.jar',
    'lib/commons-compress-1.19.jar',
    'lib/commons-math3-3.6.1.jar',
    'lib/SparseBitSet-1.2.jar',
    'ooxml-lib/xmlbeans-3.1.0.jar'
]
final def poiFiles = ['LICENSE', 'NOTICE']+ poiJars

final def requiredMods = '' \
    + 'java.base,' \
    + 'java.desktop,' \
    + 'java.xml,' \
    + 'javafx.base,' \
    + 'javafx.controls,' \
    + 'javafx.fxml,' \
    + 'javafx.graphics,' \
    + 'jdk.charsets,' \
    + 'jdk.zipfs'

task pickUpJars {
    group 'distribution_on_win64'
    
    doLast {
        copy {
            from project['myprop.userlib'] +"/${poi}"
            include poiFiles
            into outputDir.resolve("tmp/jars/${poi}")
        }
        copy {
            from targetJar
            into outputDir.resolve("tmp/jars")
        }
    }
}

task jlinkForWin64 {
    group 'distribution_on_win64'
    
    doLast {
        exec {
            commandLine project['myprop.cmd.jlink'],
                    '--no-header-files',
                    '--no-man-pages',
                    '--compress=2',
                    '--module-path', "${project['myprop.jre.mod.win64']}" \
                                    + "${project['myprop.common.pathseparator']}" \
                                    + "${project['myprop.jfx.mod.win64']}",
                    '--add-modules', requiredMods,
                    '--output', outputDir.resolve('tmp/jre-min-win64'),
                    '--strip-debug',
                    '--verbose'
        }
    }
}

task jlinkForMacOS {
    group 'distribution_on_win64'
    
    doLast {
        exec {
            commandLine project['myprop.cmd.jlink'],
                    '--no-header-files',
                    '--no-man-pages',
                    '--compress=2',
                    '--module-path', "${project['myprop.jre.mod.macos']}" \
                                    + "${project['myprop.common.pathseparator']}" \
                                    + "${project['myprop.jfx.mod.macos']}",
                    '--add-modules', requiredMods,
                    '--output', outputDir.resolve('tmp/jre-min-macos'),
                    '--strip-debug',
                    '--verbose'
        }
    }
}

task jpackageForWin64(dependsOn: [pickUpJars, jlinkForWin64]) {
    group 'distribution_on_win64'
    
    doLast {
        exec {
            // java14現在、jpackageはincubatorの位置づけである。
            // TODO: jpackageの仕様に変更が無いか確認する。
            commandLine project['myprop.cmd.jpackage'],
                    '--type', 'msi',
                    '--app-version', version,
                    '--copyright', '(c) 2018-2020 nmby',
                    '--dest', outputDir,
                    '--vendor', 'nmby',
                    '--verbose',
                    '--runtime-image', outputDir.resolve('tmp/jre-min-win64'),
                    '--icon', baseDir.resolve('resources/favicon.ico'),
                    '--input', outputDir.resolve("tmp/jars"),
                    '--java-options', '-Xms256m',
                    '--java-options', '-Xmx1024m',
                    '--main-jar', 'xyz.hotchpotch.hogandiff.jar',
                    // TODO: LICENSEファイルの内容を最新化する。
                    //      ・同梱物のライセンスも本ファイル内に記載する
                    //      ・発行年、更新年
                    '--license-file', baseDir.resolve('LICENSE'),
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    // TODO: --name 等に全角文字を含められるようにする。
                    // --description, --name, --win-menu-group に全角文字が含まれると、
                    // WiX Toolset v3.11 の light.exe 実行で下記中間ファイルに
                    // コードページ1252外の文字が含まれるということでエラーになる。
                    // 解決方法不明。jpackage越しにcodepageを指定する方法ある？
                    //      ・config\main.wxs
                    //      ・config\bundle.wxf
                    //'--description', 'Excelファイル比較ツール',
                    //'--name', '方眼Diff',
                    //'--win-menu-group', '方眼Diff',
                    '--name', 'hogandiff',
                    '--win-menu-group', 'hogandiff'
        }
    }
}

task exewrapForWin64 {
    group 'distribution_on_win64'
    
    doLast {
        exec {
            commandLine project['myprop.cmd.exewrap'],
                    '-g',
                    '-t', '14',
                    '-i', baseDir.resolve('resources/favicon.ico'),
                    '-v', version,
                    '-V', version,
                    '-d', '方眼Diff',
                    '-p', '方眼Diff',
                    '-c', '(c) 2018-2020 nmby',
                    '-j', targetJar,
                    '-o', outputDirWin64.resolve('方眼Diff.exe')
        }
    }
}

task gatherFilesForWin64(dependsOn: jlinkForWin64) {
    group 'distribution_on_win64'
    
    doLast {
        copy {
            from baseDir
            include 'README.md', 'LICENSE'
            into outputDirWin64
        }
        copy {
            from baseDir.resolve('resources')
            include '方眼Diff.exe.vmoptions'
            into outputDirWin64
        }
        copy {
            from project['myprop.userlib'] + "/${poi}"
            include poiFiles
            into outputDirWin64.resolve("lib/${poi}")
        }
        copy {
            from outputDir.resolve('tmp/jre-min-win64')
            into outputDirWin64.resolve("jre-min")
        }
    }
}

task gatherFilesForMacOS(dependsOn: jlinkForMacOS) {
    group 'distribution_on_win64'
    
    doLast {
        copy {
            from baseDir.resolve('resources/方眼Diff.app')
            exclude '**/.gitkeep'
            into outputDirMacOS.resolve('方眼Diff.app')
        }
        copy {
            from baseDir
            include 'README.md', 'LICENSE'
            into outputDirMacOS.resolve('方眼Diff.app/Contents/Resources')
        }
        copy {
            from targetJar
            into outputDirMacOS.resolve('方眼Diff.app/Contents/Java')
        }
        copy {
            String poiMod = poi.replace('.', '_')
            from project['myprop.userlib'] + "/${poi}"
            include poiFiles
            into outputDirMacOS.resolve("方眼Diff.app/Contents/PlugIns/lib/${poiMod}")
        }
        copy {
            from outputDir.resolve('tmp/jre-min-macos')
            into outputDirMacOS.resolve('方眼Diff.app/Contents/PlugIns/jre-min')
        }
    }
}

task zipForWin64(type: Zip, dependsOn: [exewrapForWin64, gatherFilesForWin64]) {
    group 'distribution_on_win64'
    
    metadataCharset='UTF-8'
    baseName = "hogandiff-${version}-win64"
    destinationDir = file(outputDir)
    from outputDirWin64
    into outputDirWin64.getFileName().toString()
}

task zipForMacOS(type: Zip, dependsOn: gatherFilesForMacOS) {
    group 'distribution_on_win64'
    
    metadataCharset='UTF-8'
    baseName = "hogandiff-${version}-macos"
    destinationDir = file(outputDir)
    from outputDirMacOS
    into outputDirMacOS.getFileName().toString()
}

task allForWin64(dependsOn: /* jpackageForWin64 */ zipForWin64) {
    group 'distribution_on_win64'
}

task allForMacOS(dependsOn: /* jpackageForMacOS */ zipForMacOS) {
    group 'distribution_on_win64'
}

task all(dependsOn: [allForWin64, allForMacOS]) {
    group 'distribution_on_win64'
}

task checkDependencies {
    group 'test_on_win64'
    
    doLast {
        Path poiDir = Path.of(project['myprop.userlib']).resolve(poi)
        String poiMods = ''
        poiJars.each {
            poiMods += poiDir.resolve(it).toString().replace('\\', '/') + ';'
        }
        
        exec {
            commandLine project['myprop.cmd.jdeps'],
                    '--module-path', "${project['myprop.jre.mod.win64']}" \
                                    + ";" \
                                    + "${project['myprop.jfx.lib.win64']}" \
                                    + ";" \
                                    + "${poiMods}",
                    '-s', targetJar
        }
    }
}
